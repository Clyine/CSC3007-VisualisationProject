---
title: "Vizualizing Crude Oil Analysis: World car production grows 3 times faster than global oil supplies"
subtitle: Data Preparation
author: "Jingquan Chen, John Wang, Keng Li Chia, Jourdan Lim, Perpetua Raj, Joey Tan"
format: html
editor: visual
output:
  pdf_document:
    fig_height: 8  # Specify plot height in inches
    fig_width: 8   # Specify plot width in inches
---

# Introduction

This document contains the data engineering required to reconstruct and improve the plot by @Matt, shown in @fig-1, depicting the world car production growth compared to global oil supplies of various countries from the year 1999 to 2012.

The codes below requires the following packages:

```{r message=FALSE}
library(tidyverse)
library(dplyr)
library(gt)
library(ggplot2)
library(scales)
library(knitr)
```

```{r}
#| label: fig-1
#| echo: false
#| fig.cap: "Visualization of world car production growth compared to global oil supplies from 1999 to 2012 by @Matt."

include_graphics("./images/original-graph.png")
```

## Visualization Source

-   [Crude Oil Peak](https://crudeoilpeak.info/world-car-production-grows-3-times-faster-than-global-oil-supplies)

## Data Sources

-   [Cars Production Statistics](https://www.oica.net/category/production-statistics/)
    -   Created CSV from tables data
-   [Petroleum and Other Liquids: Annual Petroleum and Other Liquids Production](https://www.eia.gov/international/data/world/petroleum-and-other-liquids/annual-petroleum-and-other-liquids-production?pd=5&p=0000000000000000000000000000000000vg&u=0&f=A&v=mapbubble&a=-&i=none&vo=value&&t=C&g=00000000000000000000000000000000000000000000000001&l=249-ruvvvvvfvtvnvv1vrvvvvfvvvvvvfvvvou20evvvvvvvvvvnvvvs0008&s=94694400000&e=1704067200000)
    -   Deleted Column 1 (API)

## Load Data

```{r}
cars_raw <- read.csv("cars_data.csv")
oil_raw <- read.csv("oil_data.csv")
```

## Preview Raw Data

```{r}
cars_raw |> head()
oil_raw |> head()
```

# Data Cleaning & Preprocessing

## Preprocess Oil Data

### Step 1: Get Countries

```{r}
# Create sequence of row indices in multiplies of 8 to get countries (1, 9, 17, ..., 1849)
countries_indices <- seq(1, nrow(oil_raw), by = 8)

# Select every 8th row
countries_selected <- oil_raw[countries_indices, ]

# Select only the first column
countries_oil <- countries_selected[, 1]

# Display countries
print(countries_oil)
```

### Step 2: Get Years

```{r}
# Get all the column names, for years
years_selected <- colnames(oil_raw)[2:ncol(oil_raw)]

# Remove "X" and convert to numeric
years_oil <- as.numeric(gsub("X", "", years_selected))

# Display years
print(years_oil)
```

### Step 3: Get Petroleum Data from "Total petroleum and other liquids (Mb/d)" Column

```{r}
# Create indices
total_petroleum_indices <- seq(3, nrow(oil_raw), by = 8)

# Get the data
petroleum_selected <- oil_raw[total_petroleum_indices, ]

# Display petrolum data head() 
print(head(petroleum_selected))
```

### Step 4: Create new dataframe with Countries, Years, and Total Petroleum and Other Liquids

```{r}

# Create new dataframe
new_oil_df <- petroleum_selected

# Replace first column with countries
new_oil_df[, 1] <- countries_oil

# Replace column names with numeric years
colnames(new_oil_df) <- c("Country", years_oil)

# Select columns to convert to numeric
columns_to_convert <- names(new_oil_df)[-1]

# Convert columns to numeric, ignoring NA values
suppressWarnings(new_oil_df[, columns_to_convert] <- lapply(new_oil_df[, columns_to_convert], as.numeric))

# Convert first row country names to all upper case
new_oil_df[, 1] <- toupper(new_oil_df[, 1])

# Start index of selected_rows from 0
rownames(new_oil_df) <- NULL

# Write CSV file
write.csv(new_oil_df, file = "processed_oil_all.csv", row.names = FALSE)

# Display new oil dataframe head()
print(head(new_oil_df))
```

## Preprocess Cars Data

### Step 1: Process Countries Names, Remove Datarows with Empty Strings ("")

```{r}
# Create new dataframe
new_cars_df <- cars_raw

# Convert column 1 names to upper
new_cars_df[, 1] <- toupper(new_cars_df[, 1])

# Find rows where the data in the first column is ""
rows_with_empty_first_column <- which(new_cars_df[, 1] == "")

# Find rows where the data in the first column is not ""
rows_to_keep <- new_cars_df[, 1] != ""

# Subset the data frame to keep rows where the data in the first column is not ""
new_cars_df <- new_cars_df[rows_to_keep, ]

# Display new cars dataframe head() 
print(head(new_cars_df))
```

### Step 2: Get Unique Countries

```{r}
# Get unique values in column 1
unique_countries <- unique(new_cars_df[,1])

# Print unique countries
print(unique_countries)
```

### Step 3: Change values to Match Common Country Names

```{r}
# Change values in the first column from "CZECH REP." to "CZECH REPUBLIC"
new_cars_df[new_cars_df[, 1] == "CZECH REP.", 1] <- "CZECH REPUBLIC"

# Get unique values in column 1
unique_countries <- unique(new_cars_df[,1])

# Check unique countries is correct
print(unique_countries)
```

### Step 4: Pivot Wider on Year, Concatenate Vertically on Data on Common Country Names, Change Column Data Type to Numeric

```{r}
# Get all column headers
column_headers <- colnames(new_cars_df)

# Pivot wider on Year
new_cars_df <- pivot_wider(new_cars_df, names_from = "Year", values_from = "Total")

# Remove Cars, Commercial.Vehicles, Change columns
new_cars_df <- new_cars_df[, -c(2, 3, 4)]

# Change all columns to numeric except the first column, replace comma and space in numeric terms
new_cars_df[, -1] <- lapply(new_cars_df[, -1], function(x) as.numeric(gsub("[ ,]", "", x)))

# Concatenate vertically the columns where they have the same country.region name
new_cars_df <- new_cars_df |>
  group_by(Country.Region) |>
  summarise(across(.cols = everything(), .fns = ~sum(.x, na.rm = TRUE)))

# Rename first column to Country
colnames(new_cars_df)[1] <- "Country"

# Write CSV file
write.csv(new_cars_df, file = "processed_cars_all.csv", row.names = FALSE)

# Display new cars dataframe head()
print(head(new_cars_df))
```

## Data Summarisation: Get Common Data from both Cars and Oil Data

### Step 1: Get Common Countries and Years

```{r}
# Get Common Countries
common_countries <- intersect(new_cars_df$Country, new_oil_df$Country)
print(common_countries)

# Get Common Years
common_years <- intersect(colnames(new_cars_df)[-1], colnames(new_oil_df)[-1])
print(common_years)
```

### Step 2: Get Common Data

```{r}
# Filter data based on common countries and common years
new_cars_df_filtered <- new_cars_df |>
  filter(Country %in% common_countries) |>
  select(all_of(c("Country", common_years)))
print(new_cars_df_filtered)

new_oil_df_filtered <- new_oil_df |>
  filter(Country %in% common_countries) |>
  select(all_of(c("Country", common_years)))
print(head(new_oil_df_filtered))
```

### Step 3: Write CSV Out for Filtered Data

```{r}
# Write CSV file for cars
write.csv(new_cars_df_filtered, file = "processed_cars_filtered.csv", row.names = FALSE)

# Write CSV file for oil
write.csv(new_oil_df_filtered, file = "processed_oil_filtered.csv", row.names = FALSE)
```

### Step 4: Get Oil Production Split by BRIC and Non-BRIC

```{r}
# Filter BRIC countries
bric_countries_oil <- new_oil_df_filtered |>
  filter(Country %in% c("BRAZIL", "RUSSIA", "INDIA", "CHINA"))

# Total BRIC countries oil production
total_bric_oil <- bric_countries_oil |>
  summarise(across(.cols = 2:ncol(bric_countries_oil), .fns = ~sum(., na.rm = TRUE)))

# Include first column as BRIC name
total_bric_oil <- cbind("Country" = "BRIC", total_bric_oil)

# Filter non-BRIC countries
non_bric_countries_oil <- new_oil_df_filtered |>
  filter(!Country %in% c("BRAZIL", "RUSSIA", "INDIA", "CHINA"))

# Total non-BRIC countries oil production
total_non_bric_oil <- non_bric_countries_oil |>
  summarise(across(.cols = 2:ncol(non_bric_countries_oil), .fns = ~sum(., na.rm = TRUE)))

# Include first column as non-BRIC name
total_non_bric_oil <- cbind("Country" = "non-BRIC", total_non_bric_oil)

# Bind both tables
total_oil_grouped = rbind(total_bric_oil, total_non_bric_oil)

  
print(total_oil_grouped)
```

## Step 5: Get Car Production by BRIC and Non-BRIC

```{r}
# Filter BRIC countries
bric_countries_cars <- new_cars_df_filtered |>
  filter(Country %in% c("BRAZIL", "RUSSIA", "INDIA", "CHINA"))

# Total BRIC countries car production
total_bric_cars <- bric_countries_cars |>
  summarise(across(.cols = 2:ncol(bric_countries_cars), .fns = ~sum(., na.rm = TRUE)))

# Include first column as BRIC name
total_bric_cars <- cbind("Country" = "BRIC", total_bric_cars)

# Filter non-BRIC countries
non_bric_countries_cars <- new_cars_df_filtered |>
  filter(!Country %in% c("BRAZIL", "RUSSIA", "INDIA", "CHINA"))

# Total non-BRIC countries car production
total_non_bric_cars <- non_bric_countries_cars |>
  summarise(across(.cols = 2:ncol(non_bric_countries_cars), .fns = ~sum(., na.rm = TRUE)))

# Include first column as non-BRIC name
total_non_bric_cars <- cbind("Country" = "non-BRIC", total_non_bric_cars)

# Bind both tables
processed_cars_grouped <- rbind(total_bric_cars, total_non_bric_cars)
print(processed_cars_grouped)
```

### Step 4: Write CSV Out for Car and Oil Data

```{r}
# Write CSV file for BRIC oil
write.csv(total_oil_grouped, file = "processed_oil_grouped.csv", row.names = FALSE)

# Write CSV file for Car Production (BRIC & Non BRIC)
write.csv(processed_cars_grouped, file = "processed_cars_grouped.csv", row.names = FALSE)
```

### Step 5: Consolidate all relevant data into 1 dataframe for plotting

```{r}
processed_cars_grouped = processed_cars_grouped |>
  mutate(Class = "Cars")
total_oil_grouped= total_oil_grouped |>
  mutate(Class = "Oil")

all_data_grouped = rbind(processed_cars_grouped |> mutate(Class = "Cars"), total_oil_grouped |> mutate(Class = "Oil"))
```

# Data Visualization

## World Car Production Outpaces Global Oil Supplies

```{r}
# Pivot Oil Data for plotting
total_oil <- total_oil_grouped |>
  pivot_longer(cols = -c(Country, Class), names_to = "Year", values_to = "Total") |>
  group_by(Year) |>
  summarise(Sum = sum(Total))

# Pivot Car data for plotting
total_car <- all_data_grouped |>
  pivot_longer(cols = -c(Country, Class), names_to = "Year", values_to = "Total") |>
  pivot_wider(names_from = Class, values_from = Total)

# Plot using ggplot
ggplot() +
  geom_area(data = total_car, aes(x = as.numeric(Year), y = Cars, fill = Country, group = Country), alpha = 0.5, linewidth = 0.8) +
  geom_line(data = total_oil, aes(x = as.numeric(Year), y = Sum * 1300), color = 'black', linewidth = 1) +
  geom_vline(xintercept = as.numeric(c("2004", "2009", "2020")), linetype = 2, color = 'black', linewidth = 0.5) +
  annotate(geom = "text", x = as.numeric("2004"), y = 1e+6, hjust = 0, vjust = 1.8,  size = 3, label = "Production rate diverges", color = "black", angle = 90) +
  annotate(geom = "text", x = as.numeric("2009"), y = 1e+6, hjust = 0, vjust = 1.8, size = 3, label = "Asian Financial Crisis", color = "black", angle = 90) +
  annotate(geom = "text", x = as.numeric("2020"), y = 1e+6, hjust = 0, vjust = 1.8, size = 3, label = "Covid-19 Epidemic", color = "black", angle = 90) +
  annotate(geom = "label", x = 2015, y = max(total_oil$Sum * 1300) * 1.05, label = "Oil Production", size = 3) +
  labs(title = "World Car Production Outpaces Global Oil Supplies",
       subtitle = "By BRIC & non-BRIC Countries and Year",
       x = "Year",
       y = "Total Car Production",
       caption = "Source: EIA, OCIA") +
  scale_y_continuous(labels = scales::unit_format(unit = "M", scale = 1e-6), expand =   c(0, 0)) +
  scale_x_continuous(breaks = seq(1999, 2023, by = 2), limits = c(1999, 2023), expand = c(0, 0)) +
  scale_fill_brewer(palette = "Set1") +
  theme(plot.title = element_text(size = 13, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5),
        axis.title.x = element_text(size = 9),
        axis.title.y = element_text(size = 9),
        legend.position = "right",
        legend.title = element_blank(),
        legend.spacing.y = unit(0.5, "cm"),
        legend.key.spacing.y = unit(0.5, "cm"),
        legend.background = element_blank(),
        legend.box.background = element_rect(linewidth = 0.5),
        panel.background = element_rect(fill='white'),
        panel.grid.major = element_line(color = "#EEEEEE"),
        panel.grid.minor = element_line(color = "#EEEEEE"),
        plot.margin = unit(c(0,1,0,0), "cm"))
```

## Yearly Change of Car and Oil Production

```{r}
# Pivot all data
longdata = all_data_grouped |>
  pivot_longer(cols = !c(Country, Class), names_to = "Year", values_to = "Total") |>
  pivot_wider(names_from = Class, values_from = Total) |>
  arrange(Year)

# Add YoY % change to columns
data = longdata |>
  group_by(Country) |>
  mutate(Car_Change = round(c(NA, diff(Cars)) / lag(Cars, default = 0) * 100, digits = 2)) |>
  mutate(Oil_Change = round(c(NA, diff(Oil)) / lag(Oil, default = 0) * 100, digits = 2)) |>
  arrange(Country) |>
  mutate(across(c(Car_Change, Oil_Change), ~ replace(., is.na(.), 0)))

# Aggregate oil data
oil_sum = data |>
  ungroup() |>
  group_by(Year) |>
  summarise(total = sum(Oil_Change))

# Plot using ggplot
ggplot() +
  geom_area(data = data, aes(x = Year, y = Car_Change, group = Country, fill = Country), linetype = 'solid', linewidth = 0.8, position = 'identity', alpha = 0.5) +
  geom_line(data = oil_sum, aes(x = Year, y = total, color = 'Oil Change'), group = 1, linetype = 'solid', linewidth = 0.6, alpha = 1) +
  geom_vline(xintercept = "2004", linetype = 2, color = 'black', linewidth = 0.5) +
  geom_vline(xintercept = "2009", linetype = 2, color = 'black', linewidth = 0.5) +
  geom_vline(xintercept = "2020", linetype = 2, color = 'black', linewidth = 0.5) +
  annotate(geom = "text", x = "2004", y = -24, hjust = 0, vjust = 1.8, size = 3, label = "Production rate diverges", color = "black", angle = 90) +
  annotate(geom = "text", x = "2009", y = -24, hjust = 0, vjust = 1.8, size = 3, label = "Asian Financial Crisis", color = "black", angle = 90) +
  annotate(geom = "text", x = "2020", y = -24, hjust = 0, vjust = 1.8, size = 3, label = "Covid-19 Epidemic", color = "black", angle = 90) +
  geom_hline(yintercept = 0) +
  geom_vline(xintercept = "1999") +
  scale_x_discrete(breaks = function(x) { x[c(TRUE, FALSE)] }, expand = c(0, 0)) +
  scale_color_manual(labels = c("Oil Production"), values = c("#000000")) +
  scale_fill_discrete(labels = c("BRIC - Car Production", "Non-BRIC - Car Production")) +
  labs(title = "Yearly Change of Car and Oil Production",
       subtitle = "By BRIC & non-BRIC Countries and Year",
       x = "Year",
       y = "% Change",
       caption = "Source: EIA, OCIA") +
  theme(
    plot.title = element_text(size = 13, hjust = 0.5),
    plot.subtitle = element_text(size = 8, hjust = 0.5),
    axis.title.x = element_text(size = 9),
    axis.title.y = element_text(size = 9),
    legend.position = "bottom",
    legend.title = element_blank(),
    legend.key.size = unit(0.5, "cm"),
    legend.text = element_text(size = 7),
    legend.background = element_blank(),
    legend.box.background = element_rect(linewidth = 0.5),
    panel.background = element_rect(fill = 'white'),
    panel.grid.major = element_line(color = "#EEEEEE"),
    panel.grid.minor = element_line(color = "#EEEEEE"),
    plot.margin = unit(c(0, 1, 0, 0), "cm")
  )
```
